/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodConfigPeriodDestinyManifest : DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodConfigPeriodDestinyManifest {
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "mobileAssetContentPath", skip_serializing_if = "Option::is_none")]
    pub mobile_asset_content_path: Option<String>,
    #[serde(rename = "mobileGearAssetDataBases", skip_serializing_if = "Option::is_none")]
    pub mobile_gear_asset_data_bases: Option<Vec<crate::models::DestinyPeriodConfigPeriodGearAssetDataBaseDefinition>>,
    #[serde(rename = "mobileWorldContentPaths", skip_serializing_if = "Option::is_none")]
    pub mobile_world_content_paths: Option<::std::collections::HashMap<String, String>>,
    /// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a path to the aggregated world definitions (warning: large file!)
    #[serde(rename = "jsonWorldContentPaths", skip_serializing_if = "Option::is_none")]
    pub json_world_content_paths: Option<::std::collections::HashMap<String, String>>,
    /// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a dictionary, where the key is a definition type by name, and the value is the path to the file for that definition. WARNING: This is unsafe and subject to change - do not depend on data in these files staying around long-term.
    #[serde(rename = "jsonWorldComponentContentPaths", skip_serializing_if = "Option::is_none")]
    pub json_world_component_content_paths: Option<::std::collections::HashMap<String, ::std::collections::HashMap<String, String>>>,
    #[serde(rename = "mobileClanBannerDatabasePath", skip_serializing_if = "Option::is_none")]
    pub mobile_clan_banner_database_path: Option<String>,
    #[serde(rename = "mobileGearCDN", skip_serializing_if = "Option::is_none")]
    pub mobile_gear_cdn: Option<::std::collections::HashMap<String, String>>,
    /// Information about the \"Image Pyramid\" for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the \"original/full size\" Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable)
    #[serde(rename = "iconImagePyramidInfo", skip_serializing_if = "Option::is_none")]
    pub icon_image_pyramid_info: Option<Vec<crate::models::DestinyPeriodConfigPeriodImagePyramidEntry>>,
}

impl DestinyPeriodConfigPeriodDestinyManifest {
    /// DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
    pub fn new() -> DestinyPeriodConfigPeriodDestinyManifest {
        DestinyPeriodConfigPeriodDestinyManifest {
            version: None,
            mobile_asset_content_path: None,
            mobile_gear_asset_data_bases: None,
            mobile_world_content_paths: None,
            json_world_content_paths: None,
            json_world_component_content_paths: None,
            mobile_clan_banner_database_path: None,
            mobile_gear_cdn: None,
            icon_image_pyramid_info: None,
        }
    }
}


