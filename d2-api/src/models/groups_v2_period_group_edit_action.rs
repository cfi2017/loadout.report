/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GroupsV2PeriodGroupEditAction {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "about", skip_serializing_if = "Option::is_none")]
    pub about: Option<String>,
    #[serde(rename = "motto", skip_serializing_if = "Option::is_none")]
    pub motto: Option<String>,
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    #[serde(rename = "avatarImageIndex", skip_serializing_if = "Option::is_none")]
    pub avatar_image_index: Option<i32>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<String>,
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(rename = "membershipOption", skip_serializing_if = "Option::is_none")]
    pub membership_option: Option<MembershipOption>,
    #[serde(rename = "isPublicTopicAdminOnly", skip_serializing_if = "Option::is_none")]
    pub is_public_topic_admin_only: Option<bool>,
    #[serde(rename = "allowChat", skip_serializing_if = "Option::is_none")]
    pub allow_chat: Option<bool>,
    #[serde(rename = "chatSecurity", skip_serializing_if = "Option::is_none")]
    pub chat_security: Option<ChatSecurity>,
    #[serde(rename = "callsign", skip_serializing_if = "Option::is_none")]
    pub callsign: Option<String>,
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<Homepage>,
    #[serde(rename = "enableInvitationMessagingForAdmins", skip_serializing_if = "Option::is_none")]
    pub enable_invitation_messaging_for_admins: Option<bool>,
    #[serde(rename = "defaultPublicity", skip_serializing_if = "Option::is_none")]
    pub default_publicity: Option<DefaultPublicity>,
}

impl GroupsV2PeriodGroupEditAction {
    pub fn new() -> GroupsV2PeriodGroupEditAction {
        GroupsV2PeriodGroupEditAction {
            name: None,
            about: None,
            motto: None,
            theme: None,
            avatar_image_index: None,
            tags: None,
            is_public: None,
            membership_option: None,
            is_public_topic_admin_only: None,
            allow_chat: None,
            chat_security: None,
            callsign: None,
            locale: None,
            homepage: None,
            enable_invitation_messaging_for_admins: None,
            default_publicity: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MembershipOption {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for MembershipOption {
    fn default() -> MembershipOption {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChatSecurity {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for ChatSecurity {
    fn default() -> ChatSecurity {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Homepage {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Homepage {
    fn default() -> Homepage {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultPublicity {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for DefaultPublicity {
    fn default() -> DefaultPublicity {
        Self::Variant0
    }
}

