/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodDestinyMaterialRequirement : Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodDestinyMaterialRequirement {
    /// The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.
    #[serde(rename = "itemHash", skip_serializing_if = "Option::is_none")]
    pub item_hash: Option<i32>,
    /// If True, the material will be removed from the character's inventory when the action is performed.
    #[serde(rename = "deleteOnAction", skip_serializing_if = "Option::is_none")]
    pub delete_on_action: Option<bool>,
    /// The amount of the material required.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.
    #[serde(rename = "countIsConstant", skip_serializing_if = "Option::is_none")]
    pub count_is_constant: Option<bool>,
    /// If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.
    #[serde(rename = "omitFromRequirements", skip_serializing_if = "Option::is_none")]
    pub omit_from_requirements: Option<bool>,
}

impl DestinyPeriodDefinitionsPeriodDestinyMaterialRequirement {
    /// Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.
    pub fn new() -> DestinyPeriodDefinitionsPeriodDestinyMaterialRequirement {
        DestinyPeriodDefinitionsPeriodDestinyMaterialRequirement {
            item_hash: None,
            delete_on_action: None,
            count: None,
            count_is_constant: None,
            omit_from_requirements: None,
        }
    }
}


