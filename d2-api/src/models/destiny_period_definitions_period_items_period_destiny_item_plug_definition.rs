/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodItemsPeriodDestinyItemPlugDefinition : If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.  This gives information about when it can be inserted, what the plug's category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodItemsPeriodDestinyItemPlugDefinition {
    /// The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
    #[serde(rename = "insertionRules", skip_serializing_if = "Option::is_none")]
    pub insertion_rules: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodItemsPeriodDestinyPlugRuleDefinition>>,
    /// The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.
    #[serde(rename = "plugCategoryIdentifier", skip_serializing_if = "Option::is_none")]
    pub plug_category_identifier: Option<String>,
    /// The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.
    #[serde(rename = "plugCategoryHash", skip_serializing_if = "Option::is_none")]
    pub plug_category_hash: Option<i32>,
    /// If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.
    #[serde(rename = "onActionRecreateSelf", skip_serializing_if = "Option::is_none")]
    pub on_action_recreate_self: Option<bool>,
    /// If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.
    #[serde(rename = "insertionMaterialRequirementHash", skip_serializing_if = "Option::is_none")]
    pub insertion_material_requirement_hash: Option<i32>,
    /// In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.
    #[serde(rename = "previewItemOverrideHash", skip_serializing_if = "Option::is_none")]
    pub preview_item_override_hash: Option<i32>,
    /// It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.
    #[serde(rename = "enabledMaterialRequirementHash", skip_serializing_if = "Option::is_none")]
    pub enabled_material_requirement_hash: Option<i32>,
    /// The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
    #[serde(rename = "enabledRules", skip_serializing_if = "Option::is_none")]
    pub enabled_rules: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodItemsPeriodDestinyPlugRuleDefinition>>,
    /// Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.
    #[serde(rename = "uiPlugLabel", skip_serializing_if = "Option::is_none")]
    pub ui_plug_label: Option<String>,
    #[serde(rename = "plugStyle", skip_serializing_if = "Option::is_none")]
    pub plug_style: Option<i32>,
    /// Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!
    #[serde(rename = "plugAvailability", skip_serializing_if = "Option::is_none")]
    pub plug_availability: Option<i32>,
    /// If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.
    #[serde(rename = "alternateUiPlugLabel", skip_serializing_if = "Option::is_none")]
    pub alternate_ui_plug_label: Option<String>,
    /// The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.
    #[serde(rename = "alternatePlugStyle", skip_serializing_if = "Option::is_none")]
    pub alternate_plug_style: Option<i32>,
    /// If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.
    #[serde(rename = "isDummyPlug", skip_serializing_if = "Option::is_none")]
    pub is_dummy_plug: Option<bool>,
    #[serde(rename = "parentItemOverride", skip_serializing_if = "Option::is_none")]
    pub parent_item_override: Option<Box<crate::models::DestinyDefinitionsItemsDestinyItemPlugDefinitionParentItemOverride>>,
    #[serde(rename = "energyCapacity", skip_serializing_if = "Option::is_none")]
    pub energy_capacity: Option<Box<crate::models::DestinyDefinitionsItemsDestinyItemPlugDefinitionEnergyCapacity>>,
    #[serde(rename = "energyCost", skip_serializing_if = "Option::is_none")]
    pub energy_cost: Option<Box<crate::models::DestinyDefinitionsItemsDestinyItemPlugDefinitionEnergyCost>>,
}

impl DestinyPeriodDefinitionsPeriodItemsPeriodDestinyItemPlugDefinition {
    /// If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.  This gives information about when it can be inserted, what the plug's category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.
    pub fn new() -> DestinyPeriodDefinitionsPeriodItemsPeriodDestinyItemPlugDefinition {
        DestinyPeriodDefinitionsPeriodItemsPeriodDestinyItemPlugDefinition {
            insertion_rules: None,
            plug_category_identifier: None,
            plug_category_hash: None,
            on_action_recreate_self: None,
            insertion_material_requirement_hash: None,
            preview_item_override_hash: None,
            enabled_material_requirement_hash: None,
            enabled_rules: None,
            ui_plug_label: None,
            plug_style: None,
            plug_availability: None,
            alternate_ui_plug_label: None,
            alternate_plug_style: None,
            is_dummy_plug: None,
            parent_item_override: None,
            energy_capacity: None,
            energy_cost: None,
        }
    }
}


