/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardCategoryDefinition : The definition of a category of rewards, that contains many individual rewards.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardCategoryDefinition {
    /// Identifies the reward category. Only guaranteed unique within this specific component!
    #[serde(rename = "categoryHash", skip_serializing_if = "Option::is_none")]
    pub category_hash: Option<i32>,
    /// The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.
    #[serde(rename = "categoryIdentifier", skip_serializing_if = "Option::is_none")]
    pub category_identifier: Option<String>,
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinitionDisplayProperties>>,
    /// If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we'll use at runtime to determine whether you've already earned or redeemed this set of rewards, and the category that this reward should be placed under.
    #[serde(rename = "rewardEntries", skip_serializing_if = "Option::is_none")]
    pub reward_entries: Option<::std::collections::HashMap<String, crate::models::DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardEntryDefinition>>,
    /// If you want to use BNet's recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don't feel great about putting this here, I won't lie.
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
}

impl DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardCategoryDefinition {
    /// The definition of a category of rewards, that contains many individual rewards.
    pub fn new() -> DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardCategoryDefinition {
        DestinyPeriodDefinitionsPeriodMilestonesPeriodDestinyMilestoneRewardCategoryDefinition {
            category_hash: None,
            category_identifier: None,
            display_properties: None,
            reward_entries: None,
            order: None,
        }
    }
}


