/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodComponentsPeriodCraftablesPeriodDestinyCraftableComponent {
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// If the requirements are not met for crafting this item, these will index into the list of failure strings.
    #[serde(rename = "failedRequirementIndexes", skip_serializing_if = "Option::is_none")]
    pub failed_requirement_indexes: Option<Vec<i32>>,
    /// Plug item state for the crafting sockets.
    #[serde(rename = "sockets", skip_serializing_if = "Option::is_none")]
    pub sockets: Option<Vec<crate::models::DestinyPeriodComponentsPeriodCraftablesPeriodDestinyCraftableSocketComponent>>,
}

impl DestinyPeriodComponentsPeriodCraftablesPeriodDestinyCraftableComponent {
    pub fn new() -> DestinyPeriodComponentsPeriodCraftablesPeriodDestinyCraftableComponent {
        DestinyPeriodComponentsPeriodCraftablesPeriodDestinyCraftableComponent {
            visible: None,
            failed_requirement_indexes: None,
            sockets: None,
        }
    }
}


