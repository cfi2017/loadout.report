/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyEntitiesCharactersDestinyCharacterRenderComponentCustomization : This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyEntitiesCharactersDestinyCharacterRenderComponentCustomization {
    #[serde(rename = "personality", skip_serializing_if = "Option::is_none")]
    pub personality: Option<i32>,
    #[serde(rename = "face", skip_serializing_if = "Option::is_none")]
    pub face: Option<i32>,
    #[serde(rename = "skinColor", skip_serializing_if = "Option::is_none")]
    pub skin_color: Option<i32>,
    #[serde(rename = "lipColor", skip_serializing_if = "Option::is_none")]
    pub lip_color: Option<i32>,
    #[serde(rename = "eyeColor", skip_serializing_if = "Option::is_none")]
    pub eye_color: Option<i32>,
    #[serde(rename = "hairColors", skip_serializing_if = "Option::is_none")]
    pub hair_colors: Option<Vec<i32>>,
    #[serde(rename = "featureColors", skip_serializing_if = "Option::is_none")]
    pub feature_colors: Option<Vec<i32>>,
    #[serde(rename = "decalColor", skip_serializing_if = "Option::is_none")]
    pub decal_color: Option<i32>,
    #[serde(rename = "wearHelmet", skip_serializing_if = "Option::is_none")]
    pub wear_helmet: Option<bool>,
    #[serde(rename = "hairIndex", skip_serializing_if = "Option::is_none")]
    pub hair_index: Option<i32>,
    #[serde(rename = "featureIndex", skip_serializing_if = "Option::is_none")]
    pub feature_index: Option<i32>,
    #[serde(rename = "decalIndex", skip_serializing_if = "Option::is_none")]
    pub decal_index: Option<i32>,
}

impl DestinyEntitiesCharactersDestinyCharacterRenderComponentCustomization {
    /// This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.
    pub fn new() -> DestinyEntitiesCharactersDestinyCharacterRenderComponentCustomization {
        DestinyEntitiesCharactersDestinyCharacterRenderComponentCustomization {
            personality: None,
            face: None,
            skin_color: None,
            lip_color: None,
            eye_color: None,
            hair_colors: None,
            feature_colors: None,
            decal_color: None,
            wear_helmet: None,
            hair_index: None,
            feature_index: None,
            decal_index: None,
        }
    }
}


