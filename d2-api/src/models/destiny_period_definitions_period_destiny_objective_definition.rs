/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodDestinyObjectiveDefinition : Defines an \"Objective\".  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodDestinyObjectiveDefinition {
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyDefinitionsDestinyObjectiveDefinitionDisplayProperties>>,
    /// The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
    #[serde(rename = "completionValue", skip_serializing_if = "Option::is_none")]
    pub completion_value: Option<i32>,
    /// A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<i32>,
    /// OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
    #[serde(rename = "locationHash", skip_serializing_if = "Option::is_none")]
    pub location_hash: Option<i32>,
    /// If true, the value is allowed to go negative.
    #[serde(rename = "allowNegativeValue", skip_serializing_if = "Option::is_none")]
    pub allow_negative_value: Option<bool>,
    /// If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.
    #[serde(rename = "allowValueChangeWhenCompleted", skip_serializing_if = "Option::is_none")]
    pub allow_value_change_when_completed: Option<bool>,
    /// If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.
    #[serde(rename = "isCountingDownward", skip_serializing_if = "Option::is_none")]
    pub is_counting_downward: Option<bool>,
    /// The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.  DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.
    #[serde(rename = "valueStyle", skip_serializing_if = "Option::is_none")]
    pub value_style: Option<i32>,
    /// Text to describe the progress bar.
    #[serde(rename = "progressDescription", skip_serializing_if = "Option::is_none")]
    pub progress_description: Option<String>,
    #[serde(rename = "perks", skip_serializing_if = "Option::is_none")]
    pub perks: Option<Box<crate::models::DestinyDefinitionsDestinyObjectiveDefinitionPerks>>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Box<crate::models::DestinyDefinitionsDestinyObjectiveDefinitionStats>>,
    /// If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.
    #[serde(rename = "minimumVisibilityThreshold", skip_serializing_if = "Option::is_none")]
    pub minimum_visibility_threshold: Option<i32>,
    /// If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
    #[serde(rename = "allowOvercompletion", skip_serializing_if = "Option::is_none")]
    pub allow_overcompletion: Option<bool>,
    /// If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
    #[serde(rename = "showValueOnComplete", skip_serializing_if = "Option::is_none")]
    pub show_value_on_complete: Option<bool>,
    /// The style to use when the objective is completed.
    #[serde(rename = "completedValueStyle", skip_serializing_if = "Option::is_none")]
    pub completed_value_style: Option<i32>,
    /// The style to use when the objective is still in progress.
    #[serde(rename = "inProgressValueStyle", skip_serializing_if = "Option::is_none")]
    pub in_progress_value_style: Option<i32>,
    /// Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.
    #[serde(rename = "uiLabel", skip_serializing_if = "Option::is_none")]
    pub ui_label: Option<String>,
    /// If the objective has a known UI label value, this property will represent it.
    #[serde(rename = "uiStyle", skip_serializing_if = "Option::is_none")]
    pub ui_style: Option<i32>,
    /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<i32>,
    /// The index of the entity as it was found in the investment tables.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
    #[serde(rename = "redacted", skip_serializing_if = "Option::is_none")]
    pub redacted: Option<bool>,
}

impl DestinyPeriodDefinitionsPeriodDestinyObjectiveDefinition {
    /// Defines an \"Objective\".  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
    pub fn new() -> DestinyPeriodDefinitionsPeriodDestinyObjectiveDefinition {
        DestinyPeriodDefinitionsPeriodDestinyObjectiveDefinition {
            display_properties: None,
            completion_value: None,
            scope: None,
            location_hash: None,
            allow_negative_value: None,
            allow_value_change_when_completed: None,
            is_counting_downward: None,
            value_style: None,
            progress_description: None,
            perks: None,
            stats: None,
            minimum_visibility_threshold: None,
            allow_overcompletion: None,
            show_value_on_complete: None,
            completed_value_style: None,
            in_progress_value_style: None,
            ui_label: None,
            ui_style: None,
            hash: None,
            index: None,
            redacted: None,
        }
    }
}


