/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContentPeriodModelsPeriodContentTypeProperty {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "rootPropertyName", skip_serializing_if = "Option::is_none")]
    pub root_property_name: Option<String>,
    #[serde(rename = "readableName", skip_serializing_if = "Option::is_none")]
    pub readable_name: Option<String>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "propertyDescription", skip_serializing_if = "Option::is_none")]
    pub property_description: Option<String>,
    #[serde(rename = "localizable", skip_serializing_if = "Option::is_none")]
    pub localizable: Option<bool>,
    #[serde(rename = "fallback", skip_serializing_if = "Option::is_none")]
    pub fallback: Option<bool>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    #[serde(rename = "isTitle", skip_serializing_if = "Option::is_none")]
    pub is_title: Option<bool>,
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "maxLength", skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxByteLength", skip_serializing_if = "Option::is_none")]
    pub max_byte_length: Option<i32>,
    #[serde(rename = "maxFileSize", skip_serializing_if = "Option::is_none")]
    pub max_file_size: Option<i32>,
    #[serde(rename = "regexp", skip_serializing_if = "Option::is_none")]
    pub regexp: Option<String>,
    #[serde(rename = "validateAs", skip_serializing_if = "Option::is_none")]
    pub validate_as: Option<String>,
    #[serde(rename = "rssAttribute", skip_serializing_if = "Option::is_none")]
    pub rss_attribute: Option<String>,
    #[serde(rename = "visibleDependency", skip_serializing_if = "Option::is_none")]
    pub visible_dependency: Option<String>,
    #[serde(rename = "visibleOn", skip_serializing_if = "Option::is_none")]
    pub visible_on: Option<String>,
    #[serde(rename = "datatype", skip_serializing_if = "Option::is_none")]
    pub datatype: Option<i32>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "childProperties", skip_serializing_if = "Option::is_none")]
    pub child_properties: Option<Vec<crate::models::ContentPeriodModelsPeriodContentTypeProperty>>,
    #[serde(rename = "contentTypeAllowed", skip_serializing_if = "Option::is_none")]
    pub content_type_allowed: Option<String>,
    #[serde(rename = "bindToProperty", skip_serializing_if = "Option::is_none")]
    pub bind_to_property: Option<String>,
    #[serde(rename = "boundRegex", skip_serializing_if = "Option::is_none")]
    pub bound_regex: Option<String>,
    #[serde(rename = "representationSelection", skip_serializing_if = "Option::is_none")]
    pub representation_selection: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "defaultValues", skip_serializing_if = "Option::is_none")]
    pub default_values: Option<Vec<crate::models::ContentPeriodModelsPeriodContentTypeDefaultValue>>,
    #[serde(rename = "isExternalAllowed", skip_serializing_if = "Option::is_none")]
    pub is_external_allowed: Option<bool>,
    #[serde(rename = "propertySection", skip_serializing_if = "Option::is_none")]
    pub property_section: Option<String>,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    #[serde(rename = "entitytype", skip_serializing_if = "Option::is_none")]
    pub entitytype: Option<String>,
    #[serde(rename = "isCombo", skip_serializing_if = "Option::is_none")]
    pub is_combo: Option<bool>,
    #[serde(rename = "suppressProperty", skip_serializing_if = "Option::is_none")]
    pub suppress_property: Option<bool>,
    #[serde(rename = "legalContentTypes", skip_serializing_if = "Option::is_none")]
    pub legal_content_types: Option<Vec<String>>,
    #[serde(rename = "representationValidationString", skip_serializing_if = "Option::is_none")]
    pub representation_validation_string: Option<String>,
    #[serde(rename = "minWidth", skip_serializing_if = "Option::is_none")]
    pub min_width: Option<i32>,
    #[serde(rename = "maxWidth", skip_serializing_if = "Option::is_none")]
    pub max_width: Option<i32>,
    #[serde(rename = "minHeight", skip_serializing_if = "Option::is_none")]
    pub min_height: Option<i32>,
    #[serde(rename = "maxHeight", skip_serializing_if = "Option::is_none")]
    pub max_height: Option<i32>,
    #[serde(rename = "isVideo", skip_serializing_if = "Option::is_none")]
    pub is_video: Option<bool>,
    #[serde(rename = "isImage", skip_serializing_if = "Option::is_none")]
    pub is_image: Option<bool>,
}

impl ContentPeriodModelsPeriodContentTypeProperty {
    pub fn new() -> ContentPeriodModelsPeriodContentTypeProperty {
        ContentPeriodModelsPeriodContentTypeProperty {
            name: None,
            root_property_name: None,
            readable_name: None,
            value: None,
            property_description: None,
            localizable: None,
            fallback: None,
            enabled: None,
            order: None,
            visible: None,
            is_title: None,
            required: None,
            max_length: None,
            max_byte_length: None,
            max_file_size: None,
            regexp: None,
            validate_as: None,
            rss_attribute: None,
            visible_dependency: None,
            visible_on: None,
            datatype: None,
            attributes: None,
            child_properties: None,
            content_type_allowed: None,
            bind_to_property: None,
            bound_regex: None,
            representation_selection: None,
            default_values: None,
            is_external_allowed: None,
            property_section: None,
            weight: None,
            entitytype: None,
            is_combo: None,
            suppress_property: None,
            legal_content_types: None,
            representation_validation_string: None,
            min_width: None,
            max_width: None,
            min_height: None,
            max_height: None,
            is_video: None,
            is_image: None,
        }
    }
}


