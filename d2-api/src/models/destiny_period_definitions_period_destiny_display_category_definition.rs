/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodDestinyDisplayCategoryDefinition : Display Categories are different from \"categories\" in that these are specifically for visual grouping and display of categories in Vendor UI. The \"categories\" structure is for validation of the contained items, and can be categorized entirely separately from \"Display Categories\", there need be and often will be no meaningful relationship between the two.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodDestinyDisplayCategoryDefinition {
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    /// A string identifier for the display category.
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(rename = "displayCategoryHash", skip_serializing_if = "Option::is_none")]
    pub display_category_hash: Option<i32>,
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodCommonPeriodDestinyDisplayPropertiesDefinition>>,
    /// If true, this category should be displayed in the \"Banner\" section of the vendor's UI.
    #[serde(rename = "displayInBanner", skip_serializing_if = "Option::is_none")]
    pub display_in_banner: Option<bool>,
    /// If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.  Specific categories can now have thier own distinct progression, apparently. So that's cool.
    #[serde(rename = "progressionHash", skip_serializing_if = "Option::is_none")]
    pub progression_hash: Option<i32>,
    /// If this category sorts items in a nonstandard way, this will be the way we sort.
    #[serde(rename = "sortOrder", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i32>,
    /// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
    #[serde(rename = "displayStyleHash", skip_serializing_if = "Option::is_none")]
    pub display_style_hash: Option<i32>,
    /// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
    #[serde(rename = "displayStyleIdentifier", skip_serializing_if = "Option::is_none")]
    pub display_style_identifier: Option<String>,
}

impl DestinyPeriodDefinitionsPeriodDestinyDisplayCategoryDefinition {
    /// Display Categories are different from \"categories\" in that these are specifically for visual grouping and display of categories in Vendor UI. The \"categories\" structure is for validation of the contained items, and can be categorized entirely separately from \"Display Categories\", there need be and often will be no meaningful relationship between the two.
    pub fn new() -> DestinyPeriodDefinitionsPeriodDestinyDisplayCategoryDefinition {
        DestinyPeriodDefinitionsPeriodDestinyDisplayCategoryDefinition {
            index: None,
            identifier: None,
            display_category_hash: None,
            display_properties: None,
            display_in_banner: None,
            progression_hash: None,
            sort_order: None,
            display_style_hash: None,
            display_style_identifier: None,
        }
    }
}


