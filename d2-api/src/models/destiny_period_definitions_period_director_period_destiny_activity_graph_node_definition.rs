/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeDefinition : This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeDefinition {
    /// An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<i32>,
    #[serde(rename = "overrideDisplay", skip_serializing_if = "Option::is_none")]
    pub override_display: Option<Box<crate::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinitionOverrideDisplay>>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinitionPosition>>,
    /// The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
    #[serde(rename = "featuringStates", skip_serializing_if = "Option::is_none")]
    pub featuring_states: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeFeaturingStateDefinition>>,
    /// The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
    #[serde(rename = "activities", skip_serializing_if = "Option::is_none")]
    pub activities: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeActivityDefinition>>,
    /// Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.
    #[serde(rename = "states", skip_serializing_if = "Option::is_none")]
    pub states: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeStateEntry>>,
}

impl DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeDefinition {
    /// This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
    pub fn new() -> DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeDefinition {
        DestinyPeriodDefinitionsPeriodDirectorPeriodDestinyActivityGraphNodeDefinition {
            node_id: None,
            override_display: None,
            position: None,
            featuring_states: None,
            activities: None,
            states: None,
        }
    }
}


