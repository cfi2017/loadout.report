/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyMilestonesDestinyPublicMilestoneQuestActivity : A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyPublicMilestoneQuestActivity {
    /// The hash identifier of the activity that's been chosen to be considered the canonical \"conceptual\" activity definition. This may have many variants, defined herein.
    #[serde(rename = "activityHash", skip_serializing_if = "Option::is_none")]
    pub activity_hash: Option<i32>,
    /// The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.
    #[serde(rename = "modifierHashes", skip_serializing_if = "Option::is_none")]
    pub modifier_hashes: Option<Vec<i32>>,
    /// Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.
    #[serde(rename = "variants", skip_serializing_if = "Option::is_none")]
    pub variants: Option<Vec<crate::models::DestinyPeriodMilestonesPeriodDestinyPublicMilestoneActivityVariant>>,
    /// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
    #[serde(rename = "activityModeHash", skip_serializing_if = "Option::is_none")]
    pub activity_mode_hash: Option<i32>,
    /// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
    #[serde(rename = "activityModeType", skip_serializing_if = "Option::is_none")]
    pub activity_mode_type: Option<ActivityModeType>,
}

impl DestinyMilestonesDestinyPublicMilestoneQuestActivity {
    /// A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.
    pub fn new() -> DestinyMilestonesDestinyPublicMilestoneQuestActivity {
        DestinyMilestonesDestinyPublicMilestoneQuestActivity {
            activity_hash: None,
            modifier_hashes: None,
            variants: None,
            activity_mode_hash: None,
            activity_mode_type: None,
        }
    }
}

/// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActivityModeType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "7")]
    Variant7,
    #[serde(rename = "9")]
    Variant9,
    #[serde(rename = "10")]
    Variant10,
    #[serde(rename = "11")]
    Variant11,
    #[serde(rename = "12")]
    Variant12,
    #[serde(rename = "13")]
    Variant13,
    #[serde(rename = "15")]
    Variant15,
    #[serde(rename = "16")]
    Variant16,
    #[serde(rename = "17")]
    Variant17,
    #[serde(rename = "18")]
    Variant18,
    #[serde(rename = "19")]
    Variant19,
    #[serde(rename = "20")]
    Variant20,
    #[serde(rename = "21")]
    Variant21,
    #[serde(rename = "22")]
    Variant22,
    #[serde(rename = "24")]
    Variant24,
    #[serde(rename = "25")]
    Variant25,
    #[serde(rename = "26")]
    Variant26,
    #[serde(rename = "27")]
    Variant27,
    #[serde(rename = "28")]
    Variant28,
    #[serde(rename = "29")]
    Variant29,
    #[serde(rename = "30")]
    Variant30,
    #[serde(rename = "31")]
    Variant31,
    #[serde(rename = "32")]
    Variant32,
    #[serde(rename = "37")]
    Variant37,
    #[serde(rename = "38")]
    Variant38,
    #[serde(rename = "39")]
    Variant39,
    #[serde(rename = "40")]
    Variant40,
    #[serde(rename = "41")]
    Variant41,
    #[serde(rename = "42")]
    Variant42,
    #[serde(rename = "43")]
    Variant43,
    #[serde(rename = "44")]
    Variant44,
    #[serde(rename = "45")]
    Variant45,
    #[serde(rename = "46")]
    Variant46,
    #[serde(rename = "47")]
    Variant47,
    #[serde(rename = "48")]
    Variant48,
    #[serde(rename = "49")]
    Variant49,
    #[serde(rename = "50")]
    Variant50,
    #[serde(rename = "51")]
    Variant51,
    #[serde(rename = "52")]
    Variant52,
    #[serde(rename = "53")]
    Variant53,
    #[serde(rename = "54")]
    Variant54,
    #[serde(rename = "55")]
    Variant55,
    #[serde(rename = "56")]
    Variant56,
    #[serde(rename = "57")]
    Variant57,
    #[serde(rename = "58")]
    Variant58,
    #[serde(rename = "59")]
    Variant59,
    #[serde(rename = "60")]
    Variant60,
    #[serde(rename = "61")]
    Variant61,
    #[serde(rename = "62")]
    Variant62,
    #[serde(rename = "63")]
    Variant63,
    #[serde(rename = "64")]
    Variant64,
    #[serde(rename = "65")]
    Variant65,
    #[serde(rename = "66")]
    Variant66,
    #[serde(rename = "67")]
    Variant67,
    #[serde(rename = "68")]
    Variant68,
    #[serde(rename = "69")]
    Variant69,
    #[serde(rename = "70")]
    Variant70,
    #[serde(rename = "71")]
    Variant71,
    #[serde(rename = "72")]
    Variant72,
    #[serde(rename = "73")]
    Variant73,
    #[serde(rename = "74")]
    Variant74,
    #[serde(rename = "75")]
    Variant75,
    #[serde(rename = "76")]
    Variant76,
    #[serde(rename = "77")]
    Variant77,
    #[serde(rename = "78")]
    Variant78,
    #[serde(rename = "79")]
    Variant79,
    #[serde(rename = "80")]
    Variant80,
    #[serde(rename = "81")]
    Variant81,
    #[serde(rename = "82")]
    Variant82,
    #[serde(rename = "83")]
    Variant83,
    #[serde(rename = "84")]
    Variant84,
    #[serde(rename = "85")]
    Variant85,
    #[serde(rename = "86")]
    Variant86,
    #[serde(rename = "87")]
    Variant87,
    #[serde(rename = "88")]
    Variant88,
    #[serde(rename = "89")]
    Variant89,
    #[serde(rename = "90")]
    Variant90,
}

impl Default for ActivityModeType {
    fn default() -> ActivityModeType {
        Self::Variant0
    }
}

