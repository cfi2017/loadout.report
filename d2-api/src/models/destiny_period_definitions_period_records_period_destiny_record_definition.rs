/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordDefinition {
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodCommonPeriodDestinyDisplayPropertiesDefinition>>,
    /// Indicates whether this Record's state is determined on a per-character or on an account-wide basis.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<i32>,
    #[serde(rename = "presentationInfo", skip_serializing_if = "Option::is_none")]
    pub presentation_info: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodPresentationPeriodDestinyPresentationChildBlock>>,
    #[serde(rename = "loreHash", skip_serializing_if = "Option::is_none")]
    pub lore_hash: Option<i32>,
    #[serde(rename = "objectiveHashes", skip_serializing_if = "Option::is_none")]
    pub objective_hashes: Option<Vec<i32>>,
    #[serde(rename = "recordValueStyle", skip_serializing_if = "Option::is_none")]
    pub record_value_style: Option<i32>,
    #[serde(rename = "forTitleGilding", skip_serializing_if = "Option::is_none")]
    pub for_title_gilding: Option<bool>,
    /// A hint to show a large icon for a reward
    #[serde(rename = "shouldShowLargeIcons", skip_serializing_if = "Option::is_none")]
    pub should_show_large_icons: Option<bool>,
    #[serde(rename = "titleInfo", skip_serializing_if = "Option::is_none")]
    pub title_info: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordTitleBlock>>,
    #[serde(rename = "completionInfo", skip_serializing_if = "Option::is_none")]
    pub completion_info: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordCompletionBlock>>,
    #[serde(rename = "stateInfo", skip_serializing_if = "Option::is_none")]
    pub state_info: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodRecordsPeriodSchemaRecordStateBlock>>,
    #[serde(rename = "requirements", skip_serializing_if = "Option::is_none")]
    pub requirements: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodPresentationPeriodDestinyPresentationNodeRequirementsBlock>>,
    #[serde(rename = "expirationInfo", skip_serializing_if = "Option::is_none")]
    pub expiration_info: Option<Box<crate::models::DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordExpirationBlock>>,
    #[serde(rename = "intervalInfo", skip_serializing_if = "Option::is_none")]
    pub interval_info: Option<Box<crate::models::DestinyDefinitionsRecordsDestinyRecordDefinitionIntervalInfo>>,
    /// If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.   However, note that some records intentionally have \"hidden\" rewards. These will not be returned in this list.
    #[serde(rename = "rewardItems", skip_serializing_if = "Option::is_none")]
    pub reward_items: Option<Vec<crate::models::DestinyPeriodDestinyItemQuantity>>,
    #[serde(rename = "presentationNodeType", skip_serializing_if = "Option::is_none")]
    pub presentation_node_type: Option<i32>,
    #[serde(rename = "traitIds", skip_serializing_if = "Option::is_none")]
    pub trait_ids: Option<Vec<String>>,
    #[serde(rename = "traitHashes", skip_serializing_if = "Option::is_none")]
    pub trait_hashes: Option<Vec<i32>>,
    /// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
    #[serde(rename = "parentNodeHashes", skip_serializing_if = "Option::is_none")]
    pub parent_node_hashes: Option<Vec<i32>>,
    /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<i32>,
    /// The index of the entity as it was found in the investment tables.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
    #[serde(rename = "redacted", skip_serializing_if = "Option::is_none")]
    pub redacted: Option<bool>,
}

impl DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordDefinition {
    pub fn new() -> DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordDefinition {
        DestinyPeriodDefinitionsPeriodRecordsPeriodDestinyRecordDefinition {
            display_properties: None,
            scope: None,
            presentation_info: None,
            lore_hash: None,
            objective_hashes: None,
            record_value_style: None,
            for_title_gilding: None,
            should_show_large_icons: None,
            title_info: None,
            completion_info: None,
            state_info: None,
            requirements: None,
            expiration_info: None,
            interval_info: None,
            reward_items: None,
            presentation_node_type: None,
            trait_ids: None,
            trait_hashes: None,
            parent_node_hashes: None,
            hash: None,
            index: None,
            redacted: None,
        }
    }
}


