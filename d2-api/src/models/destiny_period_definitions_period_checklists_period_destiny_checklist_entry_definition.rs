/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodChecklistsPeriodDestinyChecklistEntryDefinition : The properties of an individual checklist item. Note that almost everything is optional: it is *highly* variable what kind of data we'll actually be able to return: at times we may have no other relationships to entities at all.  Whatever UI you build, do it with the knowledge that any given entry might not actually be able to be associated with some other Destiny entity.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodChecklistsPeriodDestinyChecklistEntryDefinition {
    /// The identifier for this Checklist entry. Guaranteed unique only within this Checklist Definition, and not globally/for all checklists.
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<i32>,
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyDefinitionsChecklistsDestinyChecklistEntryDefinitionDisplayProperties>>,
    #[serde(rename = "destinationHash", skip_serializing_if = "Option::is_none")]
    pub destination_hash: Option<i32>,
    #[serde(rename = "locationHash", skip_serializing_if = "Option::is_none")]
    pub location_hash: Option<i32>,
    /// Note that a Bubble's hash doesn't uniquely identify a \"top level\" entity in Destiny. Only the combination of location and bubble can uniquely identify a place in the world of Destiny: so if bubbleHash is populated, locationHash must too be populated for it to have any meaning.  You can use this property if it is populated to look up the DestinyLocationDefinition's associated .locationReleases[].activityBubbleName property.
    #[serde(rename = "bubbleHash", skip_serializing_if = "Option::is_none")]
    pub bubble_hash: Option<i32>,
    #[serde(rename = "activityHash", skip_serializing_if = "Option::is_none")]
    pub activity_hash: Option<i32>,
    #[serde(rename = "itemHash", skip_serializing_if = "Option::is_none")]
    pub item_hash: Option<i32>,
    #[serde(rename = "vendorHash", skip_serializing_if = "Option::is_none")]
    pub vendor_hash: Option<i32>,
    #[serde(rename = "vendorInteractionIndex", skip_serializing_if = "Option::is_none")]
    pub vendor_interaction_index: Option<i32>,
    /// The scope at which this specific entry can be computed.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<i32>,
}

impl DestinyPeriodDefinitionsPeriodChecklistsPeriodDestinyChecklistEntryDefinition {
    /// The properties of an individual checklist item. Note that almost everything is optional: it is *highly* variable what kind of data we'll actually be able to return: at times we may have no other relationships to entities at all.  Whatever UI you build, do it with the knowledge that any given entry might not actually be able to be associated with some other Destiny entity.
    pub fn new() -> DestinyPeriodDefinitionsPeriodChecklistsPeriodDestinyChecklistEntryDefinition {
        DestinyPeriodDefinitionsPeriodChecklistsPeriodDestinyChecklistEntryDefinition {
            hash: None,
            display_properties: None,
            destination_hash: None,
            location_hash: None,
            bubble_hash: None,
            activity_hash: None,
            item_hash: None,
            vendor_hash: None,
            vendor_interaction_index: None,
            scope: None,
        }
    }
}


