/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TokensPeriodPartnerOfferHistoryResponse {
    #[serde(rename = "PartnerOfferKey", skip_serializing_if = "Option::is_none")]
    pub partner_offer_key: Option<String>,
    #[serde(rename = "MembershipId", skip_serializing_if = "Option::is_none")]
    pub membership_id: Option<i64>,
    #[serde(rename = "MembershipType", skip_serializing_if = "Option::is_none")]
    pub membership_type: Option<MembershipType>,
    #[serde(rename = "LocalizedName", skip_serializing_if = "Option::is_none")]
    pub localized_name: Option<String>,
    #[serde(rename = "LocalizedDescription", skip_serializing_if = "Option::is_none")]
    pub localized_description: Option<String>,
    #[serde(rename = "IsConsumable", skip_serializing_if = "Option::is_none")]
    pub is_consumable: Option<bool>,
    #[serde(rename = "QuantityApplied", skip_serializing_if = "Option::is_none")]
    pub quantity_applied: Option<i32>,
    #[serde(rename = "ApplyDate", skip_serializing_if = "Option::is_none")]
    pub apply_date: Option<String>,
}

impl TokensPeriodPartnerOfferHistoryResponse {
    pub fn new() -> TokensPeriodPartnerOfferHistoryResponse {
        TokensPeriodPartnerOfferHistoryResponse {
            partner_offer_key: None,
            membership_id: None,
            membership_type: None,
            localized_name: None,
            localized_description: None,
            is_consumable: None,
            quantity_applied: None,
            apply_date: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MembershipType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "5")]
    Variant5,
    #[serde(rename = "6")]
    Variant6,
    #[serde(rename = "10")]
    Variant10,
    #[serde(rename = "254")]
    Variant254,
    #[serde(rename = "-1")]
    VariantNeg1,
}

impl Default for MembershipType {
    fn default() -> MembershipType {
        Self::Variant0
    }
}

