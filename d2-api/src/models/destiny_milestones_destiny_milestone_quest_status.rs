/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyMilestonesDestinyMilestoneQuestStatus : The current status of the quest for the character making the request.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyMilestonesDestinyMilestoneQuestStatus {
    /// The hash identifier for the Quest Item. (Note: Quests are defined as Items, and thus you would use this to look up the quest's DestinyInventoryItemDefinition). For information on all steps in the quest, you can then examine its DestinyInventoryItemDefinition.setData property for Quest Steps (which are *also* items). You can use the Item Definition to display human readable data about the overall quest.
    #[serde(rename = "questHash", skip_serializing_if = "Option::is_none")]
    pub quest_hash: Option<i32>,
    /// The hash identifier of the current Quest Step, which is also a DestinyInventoryItemDefinition. You can use this to get human readable data about the current step and what to do in that step.
    #[serde(rename = "stepHash", skip_serializing_if = "Option::is_none")]
    pub step_hash: Option<i32>,
    /// A step can have multiple objectives. This will give you the progress for each objective in the current step, in the order in which they are rendered in-game.
    #[serde(rename = "stepObjectives", skip_serializing_if = "Option::is_none")]
    pub step_objectives: Option<Vec<crate::models::DestinyPeriodQuestsPeriodDestinyObjectiveProgress>>,
    /// Whether or not the quest is tracked
    #[serde(rename = "tracked", skip_serializing_if = "Option::is_none")]
    pub tracked: Option<bool>,
    /// The current Quest Step will be an instanced item in the player's inventory. If you care about that, this is the instance ID of that item.
    #[serde(rename = "itemInstanceId", skip_serializing_if = "Option::is_none")]
    pub item_instance_id: Option<i64>,
    /// Whether or not the whole quest has been completed, regardless of whether or not you have redeemed the rewards for the quest.
    #[serde(rename = "completed", skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    /// Whether or not you have redeemed rewards for this quest.
    #[serde(rename = "redeemed", skip_serializing_if = "Option::is_none")]
    pub redeemed: Option<bool>,
    /// Whether or not you have started this quest.
    #[serde(rename = "started", skip_serializing_if = "Option::is_none")]
    pub started: Option<bool>,
    /// If the quest has a related Vendor that you should talk to in order to initiate the quest/earn rewards/continue the quest, this will be the hash identifier of that Vendor. Look it up its DestinyVendorDefinition.
    #[serde(rename = "vendorHash", skip_serializing_if = "Option::is_none")]
    pub vendor_hash: Option<i32>,
}

impl DestinyMilestonesDestinyMilestoneQuestStatus {
    /// The current status of the quest for the character making the request.
    pub fn new() -> DestinyMilestonesDestinyMilestoneQuestStatus {
        DestinyMilestonesDestinyMilestoneQuestStatus {
            quest_hash: None,
            step_hash: None,
            step_objectives: None,
            tracked: None,
            item_instance_id: None,
            completed: None,
            redeemed: None,
            started: None,
            vendor_hash: None,
        }
    }
}


