/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodHistoricalStatsPeriodDefinitionsPeriodDestinyHistoricalStatsDefinition {
    /// Unique programmer friendly ID for this stat
    #[serde(rename = "statId", skip_serializing_if = "Option::is_none")]
    pub stat_id: Option<String>,
    /// Statistic group
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<i32>,
    /// Time periods the statistic covers
    #[serde(rename = "periodTypes", skip_serializing_if = "Option::is_none")]
    pub period_types: Option<Vec<i32>>,
    /// Game modes where this statistic can be reported.
    #[serde(rename = "modes", skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<i32>>,
    /// Category for the stat.
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<i32>,
    /// Display name
    #[serde(rename = "statName", skip_serializing_if = "Option::is_none")]
    pub stat_name: Option<String>,
    /// Display name abbreviated
    #[serde(rename = "statNameAbbr", skip_serializing_if = "Option::is_none")]
    pub stat_name_abbr: Option<String>,
    /// Description of a stat if applicable.
    #[serde(rename = "statDescription", skip_serializing_if = "Option::is_none")]
    pub stat_description: Option<String>,
    /// Unit, if any, for the statistic
    #[serde(rename = "unitType", skip_serializing_if = "Option::is_none")]
    pub unit_type: Option<i32>,
    /// Optional URI to an icon for the statistic
    #[serde(rename = "iconImage", skip_serializing_if = "Option::is_none")]
    pub icon_image: Option<String>,
    /// Optional icon for the statistic
    #[serde(rename = "mergeMethod", skip_serializing_if = "Option::is_none")]
    pub merge_method: Option<MergeMethod>,
    /// Localized Unit Name for the stat.
    #[serde(rename = "unitLabel", skip_serializing_if = "Option::is_none")]
    pub unit_label: Option<String>,
    /// Weight assigned to this stat indicating its relative impressiveness.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    /// The tier associated with this medal - be it implicitly or explicitly.
    #[serde(rename = "medalTierHash", skip_serializing_if = "Option::is_none")]
    pub medal_tier_hash: Option<i32>,
}

impl DestinyPeriodHistoricalStatsPeriodDefinitionsPeriodDestinyHistoricalStatsDefinition {
    pub fn new() -> DestinyPeriodHistoricalStatsPeriodDefinitionsPeriodDestinyHistoricalStatsDefinition {
        DestinyPeriodHistoricalStatsPeriodDefinitionsPeriodDestinyHistoricalStatsDefinition {
            stat_id: None,
            group: None,
            period_types: None,
            modes: None,
            category: None,
            stat_name: None,
            stat_name_abbr: None,
            stat_description: None,
            unit_type: None,
            icon_image: None,
            merge_method: None,
            unit_label: None,
            weight: None,
            medal_tier_hash: None,
        }
    }
}

/// Optional icon for the statistic
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MergeMethod {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for MergeMethod {
    fn default() -> MergeMethod {
        Self::Variant0
    }
}

