/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */

/// DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeDefinition : All Sockets have a \"Type\": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.  See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeDefinition {
    #[serde(rename = "displayProperties", skip_serializing_if = "Option::is_none")]
    pub display_properties: Option<Box<crate::models::DestinyDefinitionsSocketsDestinySocketTypeDefinitionDisplayProperties>>,
    #[serde(rename = "insertAction", skip_serializing_if = "Option::is_none")]
    pub insert_action: Option<Box<crate::models::DestinyDefinitionsSocketsDestinySocketTypeDefinitionInsertAction>>,
    /// A list of Plug \"Categories\" that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.  If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.
    #[serde(rename = "plugWhitelist", skip_serializing_if = "Option::is_none")]
    pub plug_whitelist: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodSocketsPeriodDestinyPlugWhitelistEntryDefinition>>,
    #[serde(rename = "socketCategoryHash", skip_serializing_if = "Option::is_none")]
    pub socket_category_hash: Option<i32>,
    /// Sometimes a socket isn't visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<i32>,
    #[serde(rename = "alwaysRandomizeSockets", skip_serializing_if = "Option::is_none")]
    pub always_randomize_sockets: Option<bool>,
    #[serde(rename = "isPreviewEnabled", skip_serializing_if = "Option::is_none")]
    pub is_preview_enabled: Option<bool>,
    #[serde(rename = "hideDuplicateReusablePlugs", skip_serializing_if = "Option::is_none")]
    pub hide_duplicate_reusable_plugs: Option<bool>,
    /// This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item's icon and nameplate.
    #[serde(rename = "overridesUiAppearance", skip_serializing_if = "Option::is_none")]
    pub overrides_ui_appearance: Option<bool>,
    #[serde(rename = "avoidDuplicatesOnInitialization", skip_serializing_if = "Option::is_none")]
    pub avoid_duplicates_on_initialization: Option<bool>,
    #[serde(rename = "currencyScalars", skip_serializing_if = "Option::is_none")]
    pub currency_scalars: Option<Vec<crate::models::DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeScalarMaterialRequirementEntry>>,
    /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<i32>,
    /// The index of the entity as it was found in the investment tables.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
    #[serde(rename = "redacted", skip_serializing_if = "Option::is_none")]
    pub redacted: Option<bool>,
}

impl DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeDefinition {
    /// All Sockets have a \"Type\": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.  See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
    pub fn new() -> DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeDefinition {
        DestinyPeriodDefinitionsPeriodSocketsPeriodDestinySocketTypeDefinition {
            display_properties: None,
            insert_action: None,
            plug_whitelist: None,
            socket_category_hash: None,
            visibility: None,
            always_randomize_sockets: None,
            is_preview_enabled: None,
            hide_duplicate_reusable_plugs: None,
            overrides_ui_appearance: None,
            avoid_duplicates_on_initialization: None,
            currency_scalars: None,
            hash: None,
            index: None,
            redacted: None,
        }
    }
}


