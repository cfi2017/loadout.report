/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GroupsV2PeriodGetGroupsForMemberResponse {
    /// A convenience property that indicates if every membership this user has that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.   The key is the Group ID for the group being checked, and the value is true if the users' memberships for that group are all inactive.
    #[serde(rename = "areAllMembershipsInactive", skip_serializing_if = "Option::is_none")]
    pub are_all_memberships_inactive: Option<::std::collections::HashMap<String, bool>>,
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Vec<crate::models::GroupsV2PeriodGroupMembership>>,
    #[serde(rename = "totalResults", skip_serializing_if = "Option::is_none")]
    pub total_results: Option<i32>,
    #[serde(rename = "hasMore", skip_serializing_if = "Option::is_none")]
    pub has_more: Option<bool>,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<Box<crate::models::QueriesPeriodPagedQuery>>,
    #[serde(rename = "replacementContinuationToken", skip_serializing_if = "Option::is_none")]
    pub replacement_continuation_token: Option<String>,
    /// If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
    #[serde(rename = "useTotalResults", skip_serializing_if = "Option::is_none")]
    pub use_total_results: Option<bool>,
}

impl GroupsV2PeriodGetGroupsForMemberResponse {
    pub fn new() -> GroupsV2PeriodGetGroupsForMemberResponse {
        GroupsV2PeriodGetGroupsForMemberResponse {
            are_all_memberships_inactive: None,
            results: None,
            total_results: None,
            has_more: None,
            query: None,
            replacement_continuation_token: None,
            use_total_results: None,
        }
    }
}


