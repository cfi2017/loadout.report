/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`forum_period_get_core_topics_paged`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetCoreTopicsPagedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_forum_tag_suggestions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetForumTagSuggestionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_poll`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetPollError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_post_and_parent`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetPostAndParentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_post_and_parent_awaiting_approval`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetPostAndParentAwaitingApprovalError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_posts_threaded_paged`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetPostsThreadedPagedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_posts_threaded_paged_from_child`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetPostsThreadedPagedFromChildError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_recruitment_thread_summaries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetRecruitmentThreadSummariesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_topic_for_content`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetTopicForContentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`forum_period_get_topics_paged`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForumPeriodGetTopicsPagedError {
    UnknownValue(serde_json::Value),
}


/// Gets a listing of all topics marked as part of the core group.
pub async fn forum_period_get_core_topics_paged(configuration: &configuration::Configuration, category_filter: i32, page: i32, quick_date: i32, sort: i32, locales: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetCoreTopicsPagedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/", local_var_configuration.base_path, categoryFilter=category_filter, page=page, quickDate=quick_date, sort=sort);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locales {
        local_var_req_builder = local_var_req_builder.query(&[("locales", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetCoreTopicsPagedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
pub async fn forum_period_get_forum_tag_suggestions(configuration: &configuration::Configuration, partialtag: Option<&str>) -> Result<crate::models::ForumGetForumTagSuggestions200Response, Error<ForumPeriodGetForumTagSuggestionsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetForumTagSuggestions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = partialtag {
        local_var_req_builder = local_var_req_builder.query(&[("partialtag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetForumTagSuggestionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the specified forum poll.
pub async fn forum_period_get_poll(configuration: &configuration::Configuration, topic_id: i64) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetPollError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/Poll/{topicId}/", local_var_configuration.base_path, topicId=topic_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetPollError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the post specified and its immediate parent.
pub async fn forum_period_get_post_and_parent(configuration: &configuration::Configuration, child_post_id: i64, showbanned: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetPostAndParentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetPostAndParent/{childPostId}/", local_var_configuration.base_path, childPostId=child_post_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = showbanned {
        local_var_req_builder = local_var_req_builder.query(&[("showbanned", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetPostAndParentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the post specified and its immediate parent of posts that are awaiting approval.
pub async fn forum_period_get_post_and_parent_awaiting_approval(configuration: &configuration::Configuration, child_post_id: i64, showbanned: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetPostAndParentAwaitingApprovalError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetPostAndParentAwaitingApproval/{childPostId}/", local_var_configuration.base_path, childPostId=child_post_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = showbanned {
        local_var_req_builder = local_var_req_builder.query(&[("showbanned", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetPostAndParentAwaitingApprovalError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
pub async fn forum_period_get_posts_threaded_paged(configuration: &configuration::Configuration, get_parent_post: bool, page: i32, page_size: i32, parent_post_id: i64, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetPostsThreadedPagedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/", local_var_configuration.base_path, getParentPost=get_parent_post, page=page, pageSize=page_size, parentPostId=parent_post_id, replySize=reply_size, rootThreadMode=root_thread_mode, sortMode=sort_mode);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = showbanned {
        local_var_req_builder = local_var_req_builder.query(&[("showbanned", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetPostsThreadedPagedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
pub async fn forum_period_get_posts_threaded_paged_from_child(configuration: &configuration::Configuration, child_post_id: i64, page: i32, page_size: i32, reply_size: i32, root_thread_mode: bool, sort_mode: i32, showbanned: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetPostsThreadedPagedFromChildError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/", local_var_configuration.base_path, childPostId=child_post_id, page=page, pageSize=page_size, replySize=reply_size, rootThreadMode=root_thread_mode, sortMode=sort_mode);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = showbanned {
        local_var_req_builder = local_var_req_builder.query(&[("showbanned", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetPostsThreadedPagedFromChildError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Allows the caller to get a list of to 25 recruitment thread summary information objects.
pub async fn forum_period_get_recruitment_thread_summaries(configuration: &configuration::Configuration, ) -> Result<crate::models::ForumGetRecruitmentThreadSummaries200Response, Error<ForumPeriodGetRecruitmentThreadSummariesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/Recruit/Summaries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetRecruitmentThreadSummariesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the post Id for the given content item's comments, if it exists.
pub async fn forum_period_get_topic_for_content(configuration: &configuration::Configuration, content_id: i64) -> Result<crate::models::ForumGetTopicForContent200Response, Error<ForumPeriodGetTopicForContentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetTopicForContent/{contentId}/", local_var_configuration.base_path, contentId=content_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetTopicForContentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get topics from any forum.
pub async fn forum_period_get_topics_paged(configuration: &configuration::Configuration, category_filter: i32, group: i64, page: i32, page_size: i32, quick_date: i32, sort: i32, locales: Option<&str>, tagstring: Option<&str>) -> Result<crate::models::ForumGetTopicsPaged200Response, Error<ForumPeriodGetTopicsPagedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/", local_var_configuration.base_path, categoryFilter=category_filter, group=group, page=page, pageSize=page_size, quickDate=quick_date, sort=sort);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = locales {
        local_var_req_builder = local_var_req_builder.query(&[("locales", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tagstring {
        local_var_req_builder = local_var_req_builder.query(&[("tagstring", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ForumPeriodGetTopicsPagedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

