/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`fireteam_period_get_active_private_clan_fireteam_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FireteamPeriodGetActivePrivateClanFireteamCountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fireteam_period_get_available_clan_fireteams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FireteamPeriodGetAvailableClanFireteamsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fireteam_period_get_clan_fireteam`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FireteamPeriodGetClanFireteamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fireteam_period_get_my_clan_fireteams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FireteamPeriodGetMyClanFireteamsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fireteam_period_search_public_available_clan_fireteams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FireteamPeriodSearchPublicAvailableClanFireteamsError {
    UnknownValue(serde_json::Value),
}


/// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
pub async fn fireteam_period_get_active_private_clan_fireteam_count(configuration: &configuration::Configuration, group_id: i64) -> Result<crate::models::GroupV2EditGroup200Response, Error<FireteamPeriodGetActivePrivateClanFireteamCountError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Fireteam/Clan/{groupId}/ActiveCount/", local_var_configuration.base_path, groupId=group_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FireteamPeriodGetActivePrivateClanFireteamCountError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
pub async fn fireteam_period_get_available_clan_fireteams(configuration: &configuration::Configuration, activity_type: i32, date_range: i32, group_id: i64, page: i32, platform: i32, public_only: i32, slot_filter: i32, lang_filter: Option<&str>) -> Result<crate::models::FireteamGetAvailableClanFireteams200Response, Error<FireteamPeriodGetAvailableClanFireteamsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/", local_var_configuration.base_path, activityType=activity_type, dateRange=date_range, groupId=group_id, page=page, platform=platform, publicOnly=public_only, slotFilter=slot_filter);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = lang_filter {
        local_var_req_builder = local_var_req_builder.query(&[("langFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FireteamPeriodGetAvailableClanFireteamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a specific fireteam.
pub async fn fireteam_period_get_clan_fireteam(configuration: &configuration::Configuration, fireteam_id: i64, group_id: i64) -> Result<crate::models::FireteamGetClanFireteam200Response, Error<FireteamPeriodGetClanFireteamError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Fireteam/Clan/{groupId}/Summary/{fireteamId}/", local_var_configuration.base_path, fireteamId=fireteam_id, groupId=group_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FireteamPeriodGetClanFireteamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
pub async fn fireteam_period_get_my_clan_fireteams(configuration: &configuration::Configuration, group_id: i64, include_closed: bool, platform: i32, group_filter: Option<bool>, lang_filter: Option<&str>) -> Result<crate::models::FireteamGetMyClanFireteams200Response, Error<FireteamPeriodGetMyClanFireteamsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/1/", local_var_configuration.base_path, groupId=group_id, includeClosed=include_closed, platform=platform);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = group_filter {
        local_var_req_builder = local_var_req_builder.query(&[("groupFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lang_filter {
        local_var_req_builder = local_var_req_builder.query(&[("langFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FireteamPeriodGetMyClanFireteamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
pub async fn fireteam_period_search_public_available_clan_fireteams(configuration: &configuration::Configuration, activity_type: i32, date_range: i32, page: i32, platform: i32, slot_filter: i32, lang_filter: Option<&str>) -> Result<crate::models::FireteamGetAvailableClanFireteams200Response, Error<FireteamPeriodSearchPublicAvailableClanFireteamsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/", local_var_configuration.base_path, activityType=activity_type, dateRange=date_range, page=page, platform=platform, slotFilter=slot_filter);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = lang_filter {
        local_var_req_builder = local_var_req_builder.query(&[("langFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FireteamPeriodSearchPublicAvailableClanFireteamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

