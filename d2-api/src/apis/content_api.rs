/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`content_period_get_content_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodGetContentByIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_get_content_by_tag_and_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodGetContentByTagAndTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_get_content_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodGetContentTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_rss_news_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodRssNewsArticlesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_search_content_by_tag_and_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodSearchContentByTagAndTypeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_search_content_with_text`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodSearchContentWithTextError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`content_period_search_help_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContentPeriodSearchHelpArticlesError {
    UnknownValue(serde_json::Value),
}


/// Returns a content item referenced by id
pub async fn content_period_get_content_by_id(configuration: &configuration::Configuration, id: i64, locale: &str, head: Option<bool>) -> Result<crate::models::ContentGetContentById200Response, Error<ContentPeriodGetContentByIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/GetContentById/{id}/{locale}/", local_var_configuration.base_path, id=id, locale=crate::apis::urlencode(locale));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = head {
        local_var_req_builder = local_var_req_builder.query(&[("head", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodGetContentByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the newest item that matches a given tag and Content Type.
pub async fn content_period_get_content_by_tag_and_type(configuration: &configuration::Configuration, locale: &str, tag: &str, r#type: &str, head: Option<bool>) -> Result<crate::models::ContentGetContentById200Response, Error<ContentPeriodGetContentByTagAndTypeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/GetContentByTagAndType/{tag}/{type}/{locale}/", local_var_configuration.base_path, locale=crate::apis::urlencode(locale), tag=crate::apis::urlencode(tag), type=crate::apis::urlencode(r#type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = head {
        local_var_req_builder = local_var_req_builder.query(&[("head", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodGetContentByTagAndTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets an object describing a particular variant of content.
pub async fn content_period_get_content_type(configuration: &configuration::Configuration, r#type: &str) -> Result<crate::models::ContentGetContentType200Response, Error<ContentPeriodGetContentTypeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/GetContentType/{type}/", local_var_configuration.base_path, type=crate::apis::urlencode(r#type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodGetContentTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a JSON string response that is the RSS feed for news articles.
pub async fn content_period_rss_news_articles(configuration: &configuration::Configuration, page_token: &str) -> Result<crate::models::ContentRssNewsArticles200Response, Error<ContentPeriodRssNewsArticlesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/Rss/NewsArticles/{pageToken}/", local_var_configuration.base_path, pageToken=crate::apis::urlencode(page_token));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodRssNewsArticlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Searches for Content Items that match the given Tag and Content Type.
pub async fn content_period_search_content_by_tag_and_type(configuration: &configuration::Configuration, locale: &str, tag: &str, r#type: &str, currentpage: Option<i32>, head: Option<bool>, itemsperpage: Option<i32>) -> Result<crate::models::ContentSearchContentWithText200Response, Error<ContentPeriodSearchContentByTagAndTypeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/", local_var_configuration.base_path, locale=crate::apis::urlencode(locale), tag=crate::apis::urlencode(tag), type=crate::apis::urlencode(r#type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = currentpage {
        local_var_req_builder = local_var_req_builder.query(&[("currentpage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = head {
        local_var_req_builder = local_var_req_builder.query(&[("head", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = itemsperpage {
        local_var_req_builder = local_var_req_builder.query(&[("itemsperpage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodSearchContentByTagAndTypeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
pub async fn content_period_search_content_with_text(configuration: &configuration::Configuration, locale: &str, ctype: Option<&str>, currentpage: Option<i32>, head: Option<bool>, searchtext: Option<&str>, source: Option<&str>, tag: Option<&str>) -> Result<crate::models::ContentSearchContentWithText200Response, Error<ContentPeriodSearchContentWithTextError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/Search/{locale}/", local_var_configuration.base_path, locale=crate::apis::urlencode(locale));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ctype {
        local_var_req_builder = local_var_req_builder.query(&[("ctype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = currentpage {
        local_var_req_builder = local_var_req_builder.query(&[("currentpage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = head {
        local_var_req_builder = local_var_req_builder.query(&[("head", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = searchtext {
        local_var_req_builder = local_var_req_builder.query(&[("searchtext", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodSearchContentWithTextError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Search for Help Articles.
pub async fn content_period_search_help_articles(configuration: &configuration::Configuration, searchtext: &str, size: &str) -> Result<crate::models::ContentSearchHelpArticles200Response, Error<ContentPeriodSearchHelpArticlesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Content/SearchHelpArticles/{searchtext}/{size}/", local_var_configuration.base_path, searchtext=crate::apis::urlencode(searchtext), size=crate::apis::urlencode(size));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContentPeriodSearchHelpArticlesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

