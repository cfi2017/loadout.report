/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.16.0
 * Contact: support@bungie.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`destiny2_period_get_clan_aggregate_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodGetClanAggregateStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_get_clan_leaderboards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodGetClanLeaderboardsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_get_leaderboards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodGetLeaderboardsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_get_leaderboards_for_character`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodGetLeaderboardsForCharacterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_get_public_vendors`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodGetPublicVendorsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_insert_socket_plug`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodInsertSocketPlugError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`destiny2_period_insert_socket_plug_free`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Destiny2PeriodInsertSocketPlugFreeError {
    UnknownValue(serde_json::Value),
}


/// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
pub async fn destiny2_period_get_clan_aggregate_stats(configuration: &configuration::Configuration, group_id: i64, modes: Option<&str>) -> Result<crate::models::Destiny2GetClanAggregateStats200Response, Error<Destiny2PeriodGetClanAggregateStatsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Stats/AggregateClanStats/{groupId}/", local_var_configuration.base_path, groupId=group_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = modes {
        local_var_req_builder = local_var_req_builder.query(&[("modes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodGetClanAggregateStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
pub async fn destiny2_period_get_clan_leaderboards(configuration: &configuration::Configuration, group_id: i64, maxtop: Option<i32>, modes: Option<&str>, statid: Option<&str>) -> Result<crate::models::Destiny2GetClanLeaderboards200Response, Error<Destiny2PeriodGetClanLeaderboardsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Stats/Leaderboards/Clans/{groupId}/", local_var_configuration.base_path, groupId=group_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = maxtop {
        local_var_req_builder = local_var_req_builder.query(&[("maxtop", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = modes {
        local_var_req_builder = local_var_req_builder.query(&[("modes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = statid {
        local_var_req_builder = local_var_req_builder.query(&[("statid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodGetClanLeaderboardsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
pub async fn destiny2_period_get_leaderboards(configuration: &configuration::Configuration, destiny_membership_id: i64, membership_type: i32, maxtop: Option<i32>, modes: Option<&str>, statid: Option<&str>) -> Result<crate::models::Destiny2GetClanLeaderboards200Response, Error<Destiny2PeriodGetLeaderboardsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/", local_var_configuration.base_path, destinyMembershipId=destiny_membership_id, membershipType=membership_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = maxtop {
        local_var_req_builder = local_var_req_builder.query(&[("maxtop", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = modes {
        local_var_req_builder = local_var_req_builder.query(&[("modes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = statid {
        local_var_req_builder = local_var_req_builder.query(&[("statid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodGetLeaderboardsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
pub async fn destiny2_period_get_leaderboards_for_character(configuration: &configuration::Configuration, character_id: i64, destiny_membership_id: i64, membership_type: i32, maxtop: Option<i32>, modes: Option<&str>, statid: Option<&str>) -> Result<crate::models::Destiny2GetClanLeaderboards200Response, Error<Destiny2PeriodGetLeaderboardsForCharacterError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/", local_var_configuration.base_path, characterId=character_id, destinyMembershipId=destiny_membership_id, membershipType=membership_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = maxtop {
        local_var_req_builder = local_var_req_builder.query(&[("maxtop", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = modes {
        local_var_req_builder = local_var_req_builder.query(&[("modes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = statid {
        local_var_req_builder = local_var_req_builder.query(&[("statid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodGetLeaderboardsForCharacterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'
pub async fn destiny2_period_get_public_vendors(configuration: &configuration::Configuration, components: Option<Vec<i32>>) -> Result<crate::models::Destiny2GetPublicVendors200Response, Error<Destiny2PeriodGetPublicVendorsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Vendors/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = components {
        local_var_req_builder = match "csv" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("components".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("components", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodGetPublicVendorsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.
pub async fn destiny2_period_insert_socket_plug(configuration: &configuration::Configuration, ) -> Result<crate::models::Destiny2InsertSocketPlug200Response, Error<Destiny2PeriodInsertSocketPlugError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Actions/Items/InsertSocketPlug/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodInsertSocketPlugError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
pub async fn destiny2_period_insert_socket_plug_free(configuration: &configuration::Configuration, ) -> Result<crate::models::Destiny2InsertSocketPlug200Response, Error<Destiny2PeriodInsertSocketPlugFreeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Destiny2/Actions/Items/InsertSocketPlugFree/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Destiny2PeriodInsertSocketPlugFreeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

